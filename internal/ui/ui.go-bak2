package ui

import (
    "fmt"
    "os"
    "strings"  // Added this import
    "github.com/fatih/color"
    "github.com/gdamore/tcell/v2"
)

var (
    Red    = color.New(color.FgRed)
    Green  = color.New(color.FgGreen)
    Yellow = color.New(color.FgYellow)
    Blue   = color.New(color.FgBlue)
    Cyan   = color.New(color.FgCyan)
)

func Clear() {
    print("\033[H\033[2J")
}

func PrintLogo() {
    logoText := `
⠀⢀⣤⣶⣶⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢠⣿⠏⠁⠀⠙⢿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⡄⠀⠀⢸⣿⡀⣴⣿⠿⠿⠿⠿⠿⢣⣿⣷⡀⠀⠀⠀
⢸⣿⠀⠀⠀⠀⢸⣿⣴⣶⣶⣄⣠⣴⣶⣦⡀⣠⣶⣶⣄⠀⠀⣾⣿⣷⠀⢠⣿⢿⡇⣿⣇⠀⠀⠀⠀⢀⣾⡟⢿⣧⠀⠀⠀
⠸⣿⣄⠀⠀⢀⣾⣿⠋⠀⠙⣿⣿⣁⣀⣹⣿⣿⠁⠈⣿⡇⢀⣿⠉⣿⡆⣼⡟⠸⣷⠙⠿⠿⠿⠿⣷⣾⡟⠀⠈⢿⣧⠀⠀
⠀⠙⠿⣿⣾⡿⢿⣿⣄⠀⢀⣿⣿⡛⠛⠛⢻⣿⠀⠀⣿⡇⣸⡟⠀⠸⣿⣿⠁⠀⣿⡆⠀⠀⠀⢀⣿⡿⠁⠀⠀⠘⣿⣆⠀
⠀⠀⠀⠀⠀⠀⢸⣿⠻⠿⠿⠋⠙⠿⠿⠿⠸⠿⠀⠀⠿⠧⠿⠇⠀⠀⠀⠀⠀⠀⠹⠿⠿⠿⠿⠿⠟⠱⠿⠿⠿⠿⠿⠿⠄
⠀⠀⠀⠀⠀⠀⠸⠿`
    Blue.Println(logoText)
    Blue.Println("(Open MSA)")
}

func PrintMenuTitle(title string) {
    Green.Println(title)
}

func ArrowSelect(options []string) int {
    screen, err := tcell.NewScreen()
    if err != nil {
        fmt.Println("Error creating screen:", err)
        os.Exit(1)
    }
    if err := screen.Init(); err != nil {
        fmt.Println("Error initializing screen:", err)
        os.Exit(1)
    }
    defer screen.Fini()

    // 기본 스타일 설정
    defStyle := tcell.StyleDefault.
        Background(tcell.ColorReset).
        Foreground(tcell.ColorWhite)
    screen.SetStyle(defStyle)

    // 선택된 항목 스타일
    selStyle := tcell.StyleDefault.
        Foreground(tcell.ColorGreen).
        Background(tcell.ColorReset).
        Bold(true)

    // Use width and height for positioning
    width, height := screen.Size()
    _ = width  // Explicitly use width to avoid unused variable error
    _ = height // Explicitly use height to avoid unused variable error

    selected := 0
    for {
        screen.Clear()

        // 로고와 타이틀 위치 계산
        logoLines := 10 // 로고의 대략적인 높이
        titleY := logoLines + 1
        menuStartY := titleY + 2

        // 로고 그리기
        logoText := `
⠀⢀⣤⣶⣶⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢠⣿⠏⠁⠀⠙⢿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⡄⠀⠀⢸⣿⡀⣴⣿⠿⠿⠿⠿⠿⢣⣿⣷⡀⠀⠀⠀
⢸⣿⠀⠀⠀⠀⢸⣿⣴⣶⣶⣄⣠⣴⣶⣦⡀⣠⣶⣶⣄⠀⠀⣾⣿⣷⠀⢠⣿⢿⡇⣿⣇⠀⠀⠀⠀⢀⣾⡟⢿⣧⠀⠀⠀
⠸⣿⣄⠀⠀⢀⣾⣿⠋⠀⠙⣿⣿⣁⣀⣹⣿⣿⠁⠈⣿⡇⢀⣿⠉⣿⡆⣼⡟⠸⣷⠙⠿⠿⠿⠿⣷⣾⡟⠀⠈⢿⣧⠀⠀
⠀⠙⠿⣿⣾⡿⢿⣿⣄⠀⢀⣿⣿⡛⠛⠛⢻⣿⠀⠀⣿⡇⣸⡟⠀⠸⣿⣿⠁⠀⣿⡆⠀⠀⠀⢀⣿⡿⠁⠀⠀⠘⣿⣆⠀
⠀⠀⠀⠀⠀⠀⢸⣿⠻⠿⠿⠋⠙⠿⠿⠿⠸⠿⠀⠀⠿⠧⠿⠇⠀⠀⠀⠀⠀⠀⠹⠿⠿⠿⠿⠿⠟⠱⠿⠿⠿⠿⠿⠿⠄
⠀⠀⠀⠀⠀⠀⠸⠿`

        // 로고 그리기
        for y, line := range strings.Split(logoText, "\n") {
            for x, r := range line {
                screen.SetContent(x, y, r, nil, 
                    tcell.StyleDefault.Foreground(tcell.ColorBlue))
            }
        }

        // "(Open MSA)" 텍스트 그리기
        openMsaText := "(Open MSA)"
        for x, r := range openMsaText {
            screen.SetContent(x, logoLines, r, nil, 
                tcell.StyleDefault.Foreground(tcell.ColorBlue))
        }

        // 타이틀 그리기
        titleText := "Select an option:"
        for x, r := range titleText {
            screen.SetContent(x, titleY, r, nil, 
                tcell.StyleDefault.Foreground(tcell.ColorGreen).Bold(true))
        }

        // 메뉴 옵션 그리기
        for i, opt := range options {
            style := defStyle
            if i == selected {
                style = selStyle
            }

            for x, r := range opt {
                screen.SetContent(x, menuStartY+i, r, nil, style)
            }
        }

        screen.Show()

        // 이벤트 처리
        switch ev := screen.PollEvent().(type) {
        case *tcell.EventKey:
            switch ev.Key() {
            case tcell.KeyUp:
                selected--
                if selected < 0 {
                    selected = len(options) - 1
                }
            case tcell.KeyDown:
                selected++
                if selected >= len(options) {
                    selected = 0
                }
            case tcell.KeyEnter:
                screen.Fini()
                return selected
            case tcell.KeyEscape:
                screen.Fini()
                os.Exit(0)
            }
        case *tcell.EventResize:
            width, height = ev.Size()
        }
    }
}
